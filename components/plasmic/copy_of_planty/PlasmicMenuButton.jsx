// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3adtwsaNx4fbnhR9s4awSb
// Component: ZyNOwmVZ2Z1Kj-
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_copy_of_planty.module.css"; // plasmic-import: 3adtwsaNx4fbnhR9s4awSb/projectcss
import sty from "./PlasmicMenuButton.module.css"; // plasmic-import: ZyNOwmVZ2Z1Kj-/css
import BarsIcon from "./icons/PlasmicIcon__Bars"; // plasmic-import: EuTUH447tgB1vH/icon
import TimesIcon from "./icons/PlasmicIcon__Times"; // plasmic-import: pruvOKS4npuYuy/icon

export const PlasmicMenuButton__VariantProps = new Array("expanded");

export const PlasmicMenuButton__ArgProps = new Array("href");

function PlasmicMenuButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxexpanded]: hasVariant(variants, "expanded", "expanded")
        })}
      >
        {(hasVariant(variants, "expanded", "expanded") ? true : true) ? (
          <BarsIcon
            className={classNames(projectcss.all, sty.svg__p6W0, {
              [sty.svgexpanded__p6W0DFQzt]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant(variants, "expanded", "expanded") ? true : true) ? (
          <TimesIcon
            className={classNames(projectcss.all, sty.svg__vGhZg, {
              [sty.svgexpanded__vGhZgdFQzt]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            role={"img"}
          />
        ) : null}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuButton__ArgProps,
      internalVariantPropNames: PlasmicMenuButton__VariantProps
    });

    return PlasmicMenuButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuButton";
  } else {
    func.displayName = `PlasmicMenuButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuButton = Object.assign(
  // Top-level PlasmicMenuButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicMenuButton
    internalVariantProps: PlasmicMenuButton__VariantProps,
    internalArgProps: PlasmicMenuButton__ArgProps
  }
);

export default PlasmicMenuButton;
/* prettier-ignore-end */
