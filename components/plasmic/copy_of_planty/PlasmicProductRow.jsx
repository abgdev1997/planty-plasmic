// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3adtwsaNx4fbnhR9s4awSb
// Component: aX1eevfQCGFMqx
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsjUiClm8X1IrJWh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jUiCLM8X1irJWh/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_copy_of_planty.module.css"; // plasmic-import: 3adtwsaNx4fbnhR9s4awSb/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: aX1eevfQCGFMqx/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 7-DFRnkJwXOoW0/icon

export const PlasmicProductRow__VariantProps = new Array();

export const PlasmicProductRow__ArgProps = new Array();

function PlasmicProductRow__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjUiClm8X1IrJWh()
  });

  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__jGxi)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__jqHqf)}
          displayHeight={"270px /* plasmic-token: o1vqzVzCPrhQyt */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/copy_of_planty/images/plant1Featuredjpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__nImoJ)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__mlMw)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__oG5Un)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__m27Us
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Nulla suscipit "}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__i1Z
            )}
          >
            {"bigplants "}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__o2B2D
            )}
          >
            {"$49.40 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column___0Zb3E)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__ifznN)}
          displayHeight={"270px /* plasmic-token: o1vqzVzCPrhQyt */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/copy_of_planty/images/plant2Featuredjpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__d6NiL)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__uLqAq)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__x2Nay)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___5HrUo
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Integer porta"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ugjH0
            )}
          >
            {"cactuses"}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__rhoPn
            )}
          >
            {"$99.00 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column___9Evo9)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__aRsPa)}
          displayHeight={"270px /* plasmic-token: o1vqzVzCPrhQyt */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/copy_of_planty/images/plant5Featuredjpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__h6Ceh)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__joOmA)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__zcjzz)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__p3Li3
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Vestibulum eget"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rotm1
            )}
          >
            {"bigplants "}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__nM5Zl
            )}
          >
            {"$220.00 "}
          </h5>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__zyhoi)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__urOcx)}
          displayHeight={"270px /* plasmic-token: o1vqzVzCPrhQyt */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/copy_of_planty/images/plant9Featuredjpg.png",
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__cTkh3)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__iOlnf)}
              role={"img"}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__wQ7Qi)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__zuRuk
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Fusce sagittis"}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qprlb
            )}
          >
            {"cactuses"}
          </div>

          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__vtI7
            )}
          >
            {"$400.40 "}
          </h5>
        </div>
      </p.Stack>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductRow__ArgProps,
      internalVariantPropNames: PlasmicProductRow__VariantProps
    });

    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
